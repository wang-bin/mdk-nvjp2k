# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      run_id:
        required: true
        type: string # number?

env:
  NVJP2K_SDK_PW: ${{ secrets.NVJP2_SDK_PW }}
  CUDA_SDK_PW: ${{ secrets.CUDA_SDK_PW }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest] #, ubuntu-latest]
        include:
          - os: windows-latest
            artifact: vs2022-windows-desktop-RelWithDebInfo
            sdk: windows-desktop-vs2022.7z

    steps:
    - uses: actions/checkout@v4

    - name: Download SDK from Workflow
      if: ${{ github.event_name == 'workflow_dispatch' }}
      uses: actions/download-artifact@v4
      with:
        name: mdk-sdk-${{ matrix.artifact }}
        repository: ${{ github.repository_owner }}/mdk-sdk
        run-id: ${{ inputs.run_id }}
        github-token: ${{ secrets.ACTION_PAT }}

    - name: Download SDK
      if: ${{ github.event_name != 'workflow_dispatch' }}
      shell: bash
      run: |
        curl -kL -o mdk-sdk-${{ matrix.sdk }} https://sourceforge.net/projects/mdk-sdk/files/nightly/mdk-sdk-${{ matrix.sdk }}

    - name: Extract SDK
      shell: bash
      run: |
        ls -lh
        if [[ ${{ matrix.sdk }} == *.xz ]]; then
            tar xvf mdk-sdk-${{ matrix.sdk }}
        else
            7z x -y mdk-sdk-${{ matrix.sdk }}
        fi

    - name: Get ABI SDK
      shell: bash
      run: |
        curl -kL -o mdk-abi-sdk.7z  https://sourceforge.net/projects/mdk-sdk/files/nightly/mdk-abi-sdk.7z
        7z x -y mdk-abi-sdk.7z

    - name: Get nvJPEG2000 SDK
      shell: bash
      run: |
        curl -kL -o nvjpeg2000.zip  https://github.com/user-attachments/files/15567692/nvjpeg2000.zip
        7z x -y -p${{ env.NVJP2K_SDK_PW }} nvjpeg2000.zip
        curl -kL -o cuda.zip  https://github.com/user-attachments/files/15572463/cuda.zip
        7z x -y -p${{ env.CUDA_SDK_PW }} cuda.zip

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest'
      with:
        arch: x64
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -GNinja
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DCUDA_SDK_DIR=${{ github.workspace }}/cuda
        -DNVJPEG2K_PATH=${{ github.workspace }}/nvjpeg2000
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config RelWithDebInfo

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: mdk-nvjp2k-${{ matrix.os}}
        path: '${{ steps.strings.outputs.build-output-dir }}/*mdk-nvjp2k.*'
